Firebase Custom Claims와 기간 설정 (프리미엄 구독 기간 등) 처리 방안
Firebase Custom Claims 자체에는 유효 기간을 직접 설정하는 기능이 없습니다. 한 번 설정된 클레임은 setCustomUserClaims를 호출하여 명시적으로 변경하거나 삭제하기 전까지는 유지됩니다.

따라서 구독 기간과 같은 시간 기반의 제한을 구현하려면, Custom Claims와 데이터베이스(public.users)의 조합 그리고 서버 측 로직이 필요합니다.

여기 몇 가지 처리 방안과 고려사항을 제시합니다.

1. plan_type Custom Claim은 유지하고, 기간 정보는 Supabase에 저장
이것이 가장 일반적이고 권장되는 방법입니다.

데이터베이스 (public.users) 변경:

public.users 테이블에 구독 시작일, 만료일 등의 컬럼을 추가합니다.

SQL

ALTER TABLE public.users
ADD COLUMN subscription_start_date TIMESTAMP WITH TIME ZONE,
ADD COLUMN subscription_end_date TIMESTAMP WITH TIME ZONE,
ADD COLUMN is_subscription_active BOOLEAN DEFAULT FALSE; -- 현재 구독이 활성 상태인지 (만료일과 비교하여 업데이트될 필드)
Firebase Custom Claims 설정:

Firebase Custom Claims에는 plan_type만 설정합니다. 기간 정보는 넣지 않습니다.

JSON

{
  "plan_type": "premium",
  "role": "user"
}
기간 만료 처리 로직:

구독 구매/연장 시:

클라이언트/백엔드: 사용자가 프리미엄 구독을 구매하거나 연장하면, 백엔드 (Next.js API Route/Cloud Function)에서 결제 처리를 합니다.
Supabase 업데이트: 결제 성공 시, public.users 테이블의 해당 사용자 subscription_start_date와 subscription_end_date를 업데이트합니다. 동시에 is_subscription_active를 TRUE로 설정합니다.
Firebase Custom Claims 업데이트: Firebase Admin SDK를 사용하여 해당 사용자의 plan_type Custom Claim을 "premium"으로 설정하고, 클라이언트에서 ID 토큰을 강제로 새로고침하도록 유도합니다 (getIdTokenResult(true)).
구독 만료 시:

스케줄러 (가장 중요): Firebase Cloud Functions (예: Cloud Scheduler와 연동) 또는 별도의 백엔드 서버에서 주기적으로 (예: 매일 자정) 실행되는 스케줄러를 구성합니다.
만료 사용자 확인: 이 스케줄러는 public.users 테이블을 조회하여 subscription_end_date가 현재 시각보다 이전인 사용자를 찾아냅니다.
Supabase 업데이트: 만료된 사용자들의 plan_type을 'free'로 업데이트하고, is_subscription_active를 FALSE로 설정합니다.
Firebase Custom Claims 업데이트: Firebase Admin SDK를 사용하여 이 사용자들의 plan_type Custom Claim을 "free"로 변경합니다. 그리고 해당 사용자에게 구독 만료 알림을 보냅니다.
서비스/기능 접근 제어:

Frontend (UI): firebase.auth().currentUser.getIdTokenResult(false) (캐시된 토큰 사용) 또는 (true) (새로운 토큰 강제 가져오기)로 클레임을 읽어 UI를 변경합니다. 하지만 UI는 쉽게 조작될 수 있으므로 절대로 최종 권한 검증에 사용해서는 안 됩니다.

Backend (Next.js API Routes): API 요청을 받을 때마다 Firebase Admin SDK로 JWT를 검증하고, custom claims (plan_type)를 확인하여 접근을 제어합니다.

Supabase RLS: Supabase는 클라이언트에서 보낸 JWT의 custom claims를 자동으로 읽을 수 있습니다.

SQL

-- 예시: 프리미엄 기능 테이블 접근 정책
CREATE POLICY "Allow premium users to access premium_feature_data"
ON public.premium_feature_data FOR SELECT
USING (auth.jwt() ->> 'plan_type' = 'premium');
중요: auth.jwt() ->> 'plan_type'은 JWT에 들어있는 값입니다. 즉, Firebase Custom Claims에 설정된 값을 참조합니다. 따라서 스케줄러를 통해 Custom Claims를 업데이트하는 것이 중요합니다.
추가 보안: 경우에 따라 RLS 정책에서 public.users 테이블의 is_subscription_active 컬럼을 직접 확인하는 것도 고려할 수 있습니다.
SQL

CREATE POLICY "Allow premium users with active subscription"
ON public.premium_feature_data FOR SELECT
USING (
    auth.jwt() ->> 'plan_type' = 'premium' AND
    (SELECT is_subscription_active FROM public.users WHERE id = auth.uid()) = TRUE
);
이 방식은 JWT의 클레임이 최신 상태가 아니더라도 데이터베이스의 최신 구독 상태를 확인하므로 더욱 강력한 보안을 제공합니다. 다만, 매 쿼리마다 users 테이블을 조회하게 되어 약간의 성능 오버헤드가 발생할 수 있습니다. 일반적인 경우, JWT 클레임 업데이트 스케줄러를 잘 관리하는 것이 더 효율적입니다.
2. Custom Claims에 만료 시간 포함 (덜 권장)
이 방법은 Custom Claims 자체에 만료 시간을 넣는 것인데, Firebase Custom Claims의 목적과는 약간 다릅니다.

Firebase Custom Claims 설정:

JSON

{
  "plan_type": "premium",
  "premium_expires_at": 1735689599 // Unix timestamp (예: 2025년 1월 1일 23:59:59 UTC)
}
기간 만료 처리 로직:

클라이언트/백엔드/RLS: premium_expires_at 클레임 값을 현재 시각과 비교하여 유효성 검사를 수행합니다.
SQL

-- Supabase RLS 예시:
CREATE POLICY "Allow premium users if subscription is valid"
ON public.premium_feature_data FOR SELECT
USING (
    auth.jwt() ->> 'plan_type' = 'premium' AND
    (auth.jwt() ->> 'premium_expires_at')::BIGINT > EXTRACT(EPOCH FROM NOW())
);
단점:
premium_expires_at는 단순히 클레임에 들어있는 숫자일 뿐입니다. 이 값이 실제로 만료되었더라도, Firebase는 해당 사용자의 plan_type을 자동으로 free로 변경해주지 않습니다. 여전히 서버 측 스케줄러를 통해 setCustomUserClaims를 호출하여 plan_type을 free로 명시적으로 변경해주어야 합니다.
두 가지 Source of Truth (JWT 클레임의 만료 시간, DB의 만료 시간)가 생길 수 있어 관리 복잡성이 증가할 수 있습니다.
결론 및 권장 사항
가장 좋은 방법은 1번 방식입니다.

Firebase Custom Claims (plan_type, role): 사용자에게 즉각적으로 적용되어야 하는 현재 상태를 나타냅니다.
Supabase (subscription_end_date, is_subscription_active): 구독의 기간 및 실제 상태에 대한 신뢰할 수 있는 소스(Source of Truth)가 됩니다.
백엔드 스케줄러: 이 둘을 동기화하고 구독 만료 처리를 자동화하는 역할을 합니다.
이 아키텍처는 유연하고 안전하며, 복잡한 구독 모델을 효과적으로 관리할 수 있도록 해줍니다.